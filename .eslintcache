[{"/Users/bryamvicente/dev/code/mod4/SunGlass-Shack/sunglass-shack-frontend/src/App.js":"1","/Users/bryamvicente/dev/code/mod4/SunGlass-Shack/sunglass-shack-frontend/src/Components/AboutUs.js":"2","/Users/bryamvicente/dev/code/mod4/SunGlass-Shack/sunglass-shack-frontend/src/Auth/Login.js":"3","/Users/bryamvicente/dev/code/mod4/SunGlass-Shack/sunglass-shack-frontend/src/Containers/Cart.js":"4","/Users/bryamvicente/dev/code/mod4/SunGlass-Shack/sunglass-shack-frontend/src/Components/CartProduct.js":"5","/Users/bryamvicente/dev/code/mod4/SunGlass-Shack/sunglass-shack-frontend/src/Components/Product.js":"6","/Users/bryamvicente/dev/code/mod4/SunGlass-Shack/sunglass-shack-frontend/src/Components/Confirmation.js":"7","/Users/bryamvicente/dev/code/mod4/SunGlass-Shack/sunglass-shack-frontend/src/reportWebVitals.js":"8","/Users/bryamvicente/dev/code/mod4/SunGlass-Shack/sunglass-shack-frontend/src/Components/Search.js":"9","/Users/bryamvicente/dev/code/mod4/SunGlass-Shack/sunglass-shack-frontend/src/Components/Checkout.js":"10","/Users/bryamvicente/dev/code/mod4/SunGlass-Shack/sunglass-shack-frontend/src/Components/ProductPage.js":"11","/Users/bryamvicente/dev/code/mod4/SunGlass-Shack/sunglass-shack-frontend/src/Auth/Signup.js":"12","/Users/bryamvicente/dev/code/mod4/SunGlass-Shack/sunglass-shack-frontend/src/Containers/ProductContainer.js":"13"},{"size":597,"mtime":1606609594169,"results":"14","hashOfConfig":"15"},{"size":704,"mtime":1607049774418,"results":"16","hashOfConfig":"15"},{"size":1171,"mtime":1606789072178,"results":"17","hashOfConfig":"15"},{"size":3109,"mtime":1607049167727,"results":"18","hashOfConfig":"15"},{"size":2005,"mtime":1607049509015,"results":"19","hashOfConfig":"15"},{"size":1485,"mtime":1607049766803,"results":"20","hashOfConfig":"15"},{"size":773,"mtime":1607043994150,"results":"21","hashOfConfig":"15"},{"size":362,"mtime":1606336510166,"results":"22","hashOfConfig":"15"},{"size":449,"mtime":1607043994162,"results":"23","hashOfConfig":"15"},{"size":6935,"mtime":1607053171318,"results":"24","hashOfConfig":"15"},{"size":12885,"mtime":1607050688250,"results":"25","hashOfConfig":"15"},{"size":2450,"mtime":1607049822240,"results":"26","hashOfConfig":"15"},{"size":5165,"mtime":1607043994163,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"xac7ag",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/bryamvicente/dev/code/mod4/SunGlass-Shack/sunglass-shack-frontend/src/App.js",["59"],"/Users/bryamvicente/dev/code/mod4/SunGlass-Shack/sunglass-shack-frontend/src/Components/AboutUs.js",[],"/Users/bryamvicente/dev/code/mod4/SunGlass-Shack/sunglass-shack-frontend/src/Auth/Login.js",[],["60","61"],"/Users/bryamvicente/dev/code/mod4/SunGlass-Shack/sunglass-shack-frontend/src/Containers/Cart.js",[],"/Users/bryamvicente/dev/code/mod4/SunGlass-Shack/sunglass-shack-frontend/src/Components/CartProduct.js",[],"/Users/bryamvicente/dev/code/mod4/SunGlass-Shack/sunglass-shack-frontend/src/Components/Product.js",["62","63","64","65"],"/Users/bryamvicente/dev/code/mod4/SunGlass-Shack/sunglass-shack-frontend/src/Components/Confirmation.js",["66"],"import React, { Component } from 'react'\nimport { NavLink } from 'react-router-dom'\nimport { Item } from 'semantic-ui-react'\nimport Confetti from 'react-confetti'\n\n\nexport default class Confirmation extends Component {\n\n\n    render() {\n        console.log(this.props.submitted)\n        return (\n\n            <>\n                <Confetti\n                width={window.innerWidth}\n                height={window.innerHeight}\n                />\n                <h2 style={{\"textAlign\": \"center\"}}>{this.props.current_user.first_name +\" \"+ this.props.current_user.last_name} Thank You for Shopping with us!!! 💸</h2>\n                <NavLink to=\"/products\"> \n                    <button>Continue Shopping</button>\n                </NavLink>\n            </>\n        )\n    }\n}\n","/Users/bryamvicente/dev/code/mod4/SunGlass-Shack/sunglass-shack-frontend/src/reportWebVitals.js",[],"/Users/bryamvicente/dev/code/mod4/SunGlass-Shack/sunglass-shack-frontend/src/Components/Search.js",[],"/Users/bryamvicente/dev/code/mod4/SunGlass-Shack/sunglass-shack-frontend/src/Components/Checkout.js",["67","68"],"import React from 'react'\nimport { Form, Button, Divider, Modal, Image, Icon } from 'semantic-ui-react'\nimport { NavLink, Route, Switch, Redirect, withRouter} from 'react-router-dom'\nimport Confirmation from './Confirmation'\n\n\nclass Checkout extends React.Component {\n\n    state = {\n        firstName: this.props.current_user.first_name,\n        lastName: this.props.current_user.last_name,\n        address: this.props.current_user.address,\n        address2: this.props.current_user.address2,\n        city: this.props.current_user.city,\n        state: this.props.current_user.state,\n        zipCode: this.props.current_user.zipcode,\n        email: this.props.current_user.email,\n        phone: \"\",\n        creditCardNum: \"\",\n        expiration: \"\",\n        ccv: \"\",\n        submitted: false,\n        open: false\n    }\n\n    localOnChangeHandler = (e) => {\n        this.setState({[e.target.name]: e.target.value})\n    }\n\n    localSubmitHandler = (e) => {\n        e.preventDefault()\n        let stateObjectValues = Object.values(this.state)\n        let filteredValues = stateObjectValues.filter(value => value === \"N/A\" || value.length < 1)\n        if(filteredValues.length === 0){\n            this.setState({submitted: true})\n            this.props.updatedUserInfoCheckout(this.state)\n            this.props.checkoutHandler()\n        }else {\n            alert(\"Every field must be completed ‼️\")\n        }\n    }\n\n    renderModalContent = () =>{\n        return this.props.cartItems.map(item => <>\n        <Modal.Content image scrolling className=\"modal-content\">\n            <Image size=\"medium\" src={item.product.image} />\n            <div className=\"float\">\n                <h3>{item.product.name}</h3>\n                <p >Price: ${item.product.price}</p>\n                <p >Quantity: {item.quantity}</p>\n            </div>\n            <br></br>\n            <br></br>\n            <Divider/>\n            </Modal.Content>\n            </>)\n    }\n\n    render (){\n        return(      \n            <>\n\n\n\n                <Switch>\n                    <Route path=\"/cart/checkout/confirmation\" render={() => <Confirmation submitted={this.state.submitted} current_user={this.props.current_user} />}/>\n                    <Route path=\"/cart/checkout\" render={() => {\n                    return(\n                        <>\n                            <Modal\n                                open={this.state.open}\n                                onClose={() => this.setState({open: false})}\n                                onOpen={() => this.setState({open: true})}\n                                trigger={<Button className=\"reviewcartbtn\">Review Cart</Button>}\n                                >\n                                    <Modal.Header>Your Current Cart</Modal.Header>\n                                    {/* <Modal.Content image scrolling> */}\n                                        {this.renderModalContent()}\n                                    {/* </Modal.Content> */}\n                                    <Modal.Actions>\n                                        {/* <NavLink to=\"/cart\"> */}\n                                            <Button onClick={() => \n                                                this.setState({open: false}, ()=> this.props.history.push('/cart'))\n                                                } primary>\n                                            Edit Cart <Icon name='chevron left' />\n                                            </Button>\n                                        {/* </NavLink> */}\n                                        <Button onClick={() => this.setState({open: false})} primary>\n                                        Proceed <Icon name='chevron right' />\n                                        </Button>\n                                    </Modal.Actions>\n                                </Modal>\n\n                            <Form className=\"hideoverflow\" onSubmit={this.localSubmitHandler} action=\"/cart/checkout/\" >\n                                <h2>User Info:</h2>\n                                <Form.Group unstackable widths={2}>\n                                    <Form.Input name=\"firstName\" label='First name' placeholder='First name' value={this.state.firstName} />\n                                    <Form.Input name=\"lastName\" label='Last name' placeholder='Last name' value={this.state.lastName} />\n                                </Form.Group>\n\n                                <Form.Group unstackable widths={2}>\n                                    <Form.Input name=\"address\" label='Address' placeholder='Address' value={this.state.address} onChange={this.localOnChangeHandler}/>\n                                    <Form.Input name=\"address2\" label='Address 2' placeholder='Apt# (optionial)' value={this.state.address2} onChange={this.localOnChangeHandler}/>\n                                </Form.Group>\n\n                                <Form.Group unstackable widths=\"equal\">\n                                    <Form.Input name=\"city\" label='City' placeholder='City' value={this.state.city} onChange={this.localOnChangeHandler} />\n                                    <Form.Input name=\"state\" label='State' placeholder='State' value={this.state.state} onChange={this.localOnChangeHandler}/>\n                                    <Form.Input name=\"zipCode\" label='Zip Code' placeholder='Zip Code' value={this.state.zipCode} onChange={this.localOnChangeHandler} />\n                                </Form.Group>\n\n                                <Form.Input name=\"email\" label='Email' placeholder='Email' value={this.state.email} onChange={this.localOnChangeHandler} />   \n                                <Form.Input name=\"phone\" label='Phone' placeholder='(xxx)-xxx-xxxx' value={this.state.phone} onChange={this.localOnChangeHandler}/>\n                                <Divider/>\n\n                                <h2>Billing Info:</h2>\n                                <Form.Group unstackable widths={3}>\n                                    <Form.Input name=\"creditCardNum\" label='Credit Card Number' placeholder='####-####-####-####' value={this.state.creditCardNum} onChange={this.localOnChangeHandler}/>\n                                    <Form.Input name=\"expiration\" label='Expiration' placeholder='MM/YY' value={this.state.expiration} onChange={this.localOnChangeHandler}/>\n                                    <Form.Input name=\"ccv\" label='CCV' placeholder='CCV' value={this.state.ccv} onChange={this.localOnChangeHandler} />\n                                </Form.Group>\n\n                                <Form.Checkbox label='I agree to the Terms and Conditions' />\n                                <Button type='submit'> Place your order</Button>\n                            </Form>\n                        </>\n                    )\n                }}/>\n            </Switch>\n            </>\n        ) \n    }\n}\n\nexport default withRouter(Checkout);","/Users/bryamvicente/dev/code/mod4/SunGlass-Shack/sunglass-shack-frontend/src/Components/ProductPage.js",["69"],"import '../App.css';\nimport React, { Component } from 'react'\nimport Header from './Header'\nimport Login from '../Auth/Login'\nimport Signup from '../Auth/Signup'\nimport Cart from '../Containers/Cart'\nimport ProductContainer from '../Containers/ProductContainer'\nimport { NavLink, Route, Switch, withRouter, Redirect } from 'react-router-dom'\nimport {  Icon, Button, Menu} from 'semantic-ui-react'\nimport AboutUs from './AboutUs'\n\nclass ProductPage extends Component {\n\n    state = {\n        cartItems: [],\n        current_user: null,\n        current_cart: null,\n        activeItem: \"sunglass\"\n    }\n\n    addingCartProducts = (product) => {\n        const token = localStorage.getItem('token')\n        \n        fetch(\"http://localhost:3000/api/v1/cart_products\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\",\n                \"Authorization\": `Bearer ${token}`\n            },\n            body: JSON.stringify({\n                product_id: product.id,\n                cart_id: this.state.current_cart.id\n            })\n        })\n        .then(r => r.json())\n        .then( newCartProduct => this.setState({ cartItems: [...this.state.cartItems, newCartProduct]}))\n    }\n\n    foundCart = () => {\n        let thisCart = this.state.current_user.carts.find(cartObj => cartObj.history === false)\n\n        if(thisCart){      \n            this.setState(prevState=>({\n                current_cart: thisCart\n            }), () =>  this.fetchCartProducts())          \n        }else {\n            const token = localStorage.getItem('token')\n\n            fetch(\"http://localhost:3000/api/v1/carts\", {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Accept': 'application/json',\n                    \"Authorization\": `Bearer ${token}`\n                },\n                body: JSON.stringify({\n                    'user_id': this.state.current_user.id\n                })\n            })\n            .then(r => r.json())\n            .then(data => {\n                let copiedUser = {...this.state.current_user}\n                copiedUser.carts.push(data)\n                this.setState(prevState=>({\n                current_cart: data,\n                current_user: copiedUser\n            }))})\n            .catch(console.log)\n        }\n    }\n\n    fetchCartProducts = () =>{\n        const token = localStorage.getItem('token')\n        fetch(\"http://localhost:3000/api/v1/cart_products\",{\n            method: \"GET\",\n            headers: {\n                Authorization: `Bearer ${token}`\n            }\n        })\n        .then(r => r.json())\n        .then(data => {\n            let thisUserProducts = data.filter(dataObj => dataObj.cart.user_id === this.state.current_user.id && dataObj.cart.history === false)\n            this.setState({ cartItems: thisUserProducts})\n        })\n    }\n\n    componentDidMount = () => {\n        const token = localStorage.getItem('token')\n\n        fetch(\"http://localhost:3000/api/v1/profile\", {\n            method: 'GET',\n            headers: {Authorization: `Bearer ${token}`}\n        })\n        .then(r=>r.json())\n        .then(data => {\n            if(data.user){\n                this.setState(prevState=> ({\n                current_user: data.user,\n                current_cart:  data.user.carts[0]\n                }), ()=>{\n                    if (localStorage.getItem('token')){\n                        this.fetchCartProducts()\n                    }\n                })\n            }\n        })\n    }\n\n    updateQuantityHandler = (cartProduct, updatedQuantity) => {\n        console.log(\"testing\", cartProduct, updatedQuantity) \n        \n        if(updatedQuantity >= 1 && updatedQuantity <= 4){\n            const token = localStorage.getItem('token')\n            fetch(`http://localhost:3000/api/v1/cart_products/${cartProduct.id}`, {\n                method: \"PATCH\",\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"Accept\": \"application/json\",\n                    \"Authorization\": `Bearer ${token}`\n                },\n                body: JSON.stringify({ quantity: updatedQuantity })\n            })\n            .then(r => r.json())\n            .then(newItem => {\n                let copiedArray = [...this.state.cartItems]\n                let oldObject = copiedArray.findIndex(itemObj => itemObj.id === newItem.id )\n                copiedArray[oldObject] = newItem\n                this.setState({ cartItems: copiedArray})\n            })\n        }\n    }\n\n    loginSubmitHandler = (userInfo) =>{\n        const token = localStorage.getItem('token')\n        fetch(\"http://localhost:3000/api/v1/login\", {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n                \"Authorization\": `Bearer ${token}`\n            },\n            body: JSON.stringify({user: userInfo})\n        })\n        .then(r => r.json())\n        .then(data => {\n            if (data.user){\n                this.setState(prevState=> ({\n                    current_user: data.user\n                }), () =>{\n                    this.foundCart()\n                })\n                \n                localStorage.setItem(\"token\", data.jwt)\n                this.props.history.push('/products')\n                return\n            }\n        })\n        .catch(console.log)\n    }\n\n    logoutHandler = (e) =>{\n        e.preventDefault()\n        localStorage.removeItem('token')\n        this.setState(prevState=>({\n            current_user: null,\n            current_cart: null,\n            cartItems: []\n        }), ()=> this.props.history.push('/login'))\n    }\n\n    deleteCartProductHandler = (object) => {\n        const token = localStorage.getItem('token')\n        fetch(`http://localhost:3000/api/v1/cart_products/${object.id}`, {\n            method: \"DELETE\",\n            headers: {\n                Authorization: `Bearer ${token}`\n            }\n        })\n        .then(r => r.json())\n        .then(() => {\n            let copiedArray = [...this.state.cartItems]\n            let newList = copiedArray.filter(cartP => cartP.id !== object.id)\n            this.setState({ cartItems: newList})\n        })\n        .catch(console.log)\n    }\n\n    checkoutHandler = () => {\n        const token = localStorage.getItem('token')\n        fetch(`http://localhost:3000/api/v1/carts/${this.state.current_cart.id}`, {\n            method: \"PATCH\",\n            headers: {\n                \"Content-Type\":\"application/json\",\n                \"Accept\": \"application/json\",\n                \"Authorization\": `Bearer ${token}`\n            },\n            body: JSON.stringify({ history: true})\n        })\n        .then(r => r.json())\n        .then(updatedCart => {\n            let copiedUser = {...this.state.current_user}\n            let cartIndex = copiedUser.carts.findIndex(cart => cart.id === updatedCart.id)\n            copiedUser.carts[cartIndex] = updatedCart\n\n            this.setState({ \n                current_cart:null,\n                cartItems: [],\n                current_user: copiedUser\n            }, () => {\n                this.foundCart()\n            })\n        })\n        .catch(console.log)\n        this.props.history.push(\"/cart/checkout/confirmation\")\n    }\n\n    signUpSubmitHandler = (userObj) => {\n        console.log(\"created!\", userObj, this.state.current_user)\n        const token = localStorage.getItem('token')\n        fetch(\"http://localhost:3000/api/v1/users\", {   \n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\",\n                \"Authorization\": `Bearer ${token}`\n            },\n            body: JSON.stringify({\n                first_name: userObj.firstName,\n                last_name: userObj.lastName,\n                username: userObj.userName,\n                age: userObj.age,\n                email: userObj.email,\n                password: userObj.password1\n            })\n        })\n        .then(r => r.json())\n        .then(data => {\n            if (data.user){\n                this.setState(prevState=> ({\n                    current_user: data.user\n                }), () =>{\n                    this.foundCart()\n                })\n\n                localStorage.setItem(\"token\", data.jwt)\n                this.props.history.push('/products')\n                return\n            }\n        })\n        .catch(console.log)\n    }\n\n    updatedUserInfoCheckout = (userState) => {\n        const token = localStorage.getItem('token')\n\n        fetch(`http://localhost:3000/api/v1/users/${this.state.current_user.id}`, {\n            method: \"PATCH\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Accept\": \"application/json\",\n                \"Authorization\": `Bearer ${token}`\n            },\n            body: JSON.stringify({\n\n                first_name: userState.firstName ,\n                last_name: userState.lastName,\n                address: userState.address,\n                address2: userState.address2,\n                city: userState.city,\n                state: userState.state,\n                zipcode: userState.zipCode,\n                email: userState.email\n            })\n        })\n        .then(r => r.json())\n        .then(data => {\n            if (data){\n                this.setState(prevState=> ({\n                    current_user: data\n                }))\n            }\n        })\n        .catch(console.log)\n    }\n\n    handleItemClick = (e, { name }) => this.setState({ activeItem: name })\n\n    render(){\n        return (\n        <>  \n            <Header />\n            <Menu className=\"nav-links\" pointing secondary>\n                <Menu.Item\n                    children={<NavLink to=\"/products\" className=\"sunglass-link\">Sunglasses</NavLink>} \n                    name=\"sunglasses\"\n                    active={this.state.activeItem === 'sunglasses'}\n                    onClick={this.handleItemClick}\n                />\n\n                 <Menu.Item\n                    children={<NavLink to=\"/aboutus\" className=\"aboutus-link\"> About Us </NavLink>}\n                    name=\"aboutus\"\n                    active={this.state.activeItem === 'aboutus'}\n                    onClick={this.handleItemClick}\n                />\n            \n                <Menu.Menu position='right'>\n                    {localStorage.getItem('token') ? \n                            <>\n                                <Menu.Item children={<button className=\"logout\" onClick={this.logoutHandler}>Log Out</button>} />\n\n                                <Menu.Item children={ \n                                    <NavLink to=\"/cart\">\n                            \n                                        <Button animated='vertical'>\n                                            <Button.Content hidden>{this.state.cartItems.map(cartP => cartP.quantity).reduce((a, b)=> a + b, 0)}</Button.Content>\n                                            <Button.Content visible>\n                                            <Icon name='shop'  />\n                                            </Button.Content>\n                                        </Button>\n                                    </NavLink>\n                                }/>\n                            </>\n                        : \n                        <>\n                            <Menu.Item children={ <NavLink to=\"/login\" className=\"login-link\">Log In</NavLink> } />\n                            <Menu.Item children={ <NavLink to=\"/signup\" className=\"signup-link\">Sign up</NavLink>} />\n                        </>\n                    }\n                </Menu.Menu>\n             </Menu>\n                <Switch>\n                    <Route path=\"/signup\" render={()=> <Signup  signUpSubmitHandler={this.signUpSubmitHandler} />} />\n                    <Route path=\"/login\" render={()=> <Login loginSubmitHandler={this.loginSubmitHandler}/>} />\n                    \n                   {this.state.current_user !== null ? \n                        <Route path=\"/cart\" render={() => <Cart current_user={this.state.current_user} cartItems={this.state.cartItems} updateQuantityHandler={this.updateQuantityHandler}  deleteCartProductHandler={ this.deleteCartProductHandler} checkoutHandler={this.checkoutHandler} updatedUserInfoCheckout={this.updatedUserInfoCheckout}/>}/> \n                    : \n                    null\n                    }    \n                    <Route path=\"/aboutus\" render={() => <AboutUs />}/>\n                    <Route path=\"/products\" render={() => <ProductContainer  addingCartProducts={ this.addingCartProducts} />}/>\n                </Switch>\n            </>\n        )\n    }\n}\n\nexport default withRouter(ProductPage)","/Users/bryamvicente/dev/code/mod4/SunGlass-Shack/sunglass-shack-frontend/src/Auth/Signup.js",["70"],"import React, { Component } from 'react'\nimport { Form, Button, Divider } from 'semantic-ui-react'\n\nexport default class Signup extends Component {\n\n    state = {\n        firstName: \"\",\n        lastName: \"\",\n        age: \"\",\n        userName: \"\",\n        email: \"\",\n        password1: \"\",\n        password2: \"\",\n        clicked: false\n    }\n\n    localOnChangeHandler = (e) => {\n        this.setState({[e.target.name]: e.target.value})\n    }\n\n    localSubmitHandler = (e) => {\n        e.preventDefault()\n        if(this.state.password1 === this.state.password2){\n            this.setState({clicked: true})\n            this.props.signUpSubmitHandler(this.state)\n        }else {\n            alert(\"Passwords do not match, please try again!\")\n        }\n    }\n\n    render() {\n        return (\n            <>\n                <Form onSubmit={this.localSubmitHandler} action=\"/cart/checkout/\" >\n                    <h2>User Info:</h2>\n                    <Form.Group unstackable widths={2}>\n                        <Form.Input name=\"firstName\" label='First Name' placeholder='First Name' value={this.state.firstName} onChange={this.localOnChangeHandler}/>\n                        <Form.Input name=\"lastName\" label='Last Name' placeholder='Last Name' value={this.state.lastName} onChange={this.localOnChangeHandler}/>\n                        <Form.Input name=\"age\" type=\"number\" label='Age' placeholder='Age' value={this.state.age} onChange={this.localOnChangeHandler}/>\n                    </Form.Group>\n\n                    <Form.Group unstackable widths={2}>\n                        <Form.Input name=\"userName\" label='Username' placeholder='Username' value={this.state.userName} onChange={this.localOnChangeHandler}/>\n                    </Form.Group>\n\n                    <Form.Input name=\"email\" label='Email' placeholder='Email Address' value={this.state.email} onChange={this.localOnChangeHandler}/>\n                    <Form.Input name=\"password1\" type=\"password\" label='Password' placeholder='Password' value={this.state.password} onChange={this.localOnChangeHandler}/>\n                    <Form.Input name=\"password2\" type=\"password\" label='Confirm Password' placeholder='Password' value={this.state.password} onChange={this.localOnChangeHandler}/>\n                    {this.state.clicked ?  <Button loading >Create Account!</Button> : <Button>Create Account!</Button>}\n                    \n                </Form>\n            </>\n        )\n    }\n}\n","/Users/bryamvicente/dev/code/mod4/SunGlass-Shack/sunglass-shack-frontend/src/Containers/ProductContainer.js",["71"],{"ruleId":"72","severity":1,"message":"73","line":1,"column":8,"nodeType":"74","messageId":"75","endLine":1,"endColumn":12},{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","replacedBy":"79"},{"ruleId":"72","severity":1,"message":"80","line":2,"column":19,"nodeType":"74","messageId":"75","endLine":2,"endColumn":25},{"ruleId":"72","severity":1,"message":"81","line":4,"column":16,"nodeType":"74","messageId":"75","endLine":4,"endColumn":20},{"ruleId":"72","severity":1,"message":"82","line":4,"column":22,"nodeType":"74","messageId":"75","endLine":4,"endColumn":27},{"ruleId":"83","severity":1,"message":"84","line":22,"column":13,"nodeType":"85","endLine":22,"endColumn":110},{"ruleId":"72","severity":1,"message":"86","line":3,"column":10,"nodeType":"74","messageId":"75","endLine":3,"endColumn":14},{"ruleId":"72","severity":1,"message":"87","line":3,"column":10,"nodeType":"74","messageId":"75","endLine":3,"endColumn":17},{"ruleId":"72","severity":1,"message":"88","line":3,"column":34,"nodeType":"74","messageId":"75","endLine":3,"endColumn":42},{"ruleId":"72","severity":1,"message":"88","line":8,"column":46,"nodeType":"74","messageId":"75","endLine":8,"endColumn":54},{"ruleId":"72","severity":1,"message":"89","line":2,"column":24,"nodeType":"74","messageId":"75","endLine":2,"endColumn":31},{"ruleId":"72","severity":1,"message":"90","line":6,"column":15,"nodeType":"74","messageId":"75","endLine":6,"endColumn":28},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","no-native-reassign",["91"],"no-negated-in-lhs",["92"],"'Switch' is defined but never used.","'Icon' is defined but never used.","'Image' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Item' is defined but never used.","'NavLink' is defined but never used.","'Redirect' is defined but never used.","'Divider' is defined but never used.","'Advertisement' is defined but never used.","no-global-assign","no-unsafe-negation"]